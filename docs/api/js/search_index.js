var search_data = {"index":{"searchIndex":["couch","server","yaltools","cmdline","crypt","jsonformatter","labelnotfounderror","main","mainwrapper","procjson","serverconnectionerror","yaalldocs","yadocs","yajsonrows","yaviewdocs","<<()","decrypt_text()","delete()","delete()","delete_all()","each()","each_with_attachments()","encrypt_text()","exclude_value_from_json()","gen_password()","get()","get()","getcouch()","getcouch()","get_all()","get_default_master_pwfile()","get_default_yaml_conf()","get_default_yaml_label()","get_header()","grep_json()","grep_json_p()","head()","head()","line_to_json()","load_crypt_password()","load_line()","load_line_as_csv()","max_numrows()","new()","new()","new()","new()","new()","new()","original_push()","page()","parse()","post()","post()","post_all()","push()","put()","put()","redeeming_rev()","request()","save_crypt_password()","save_data()","select_value_from_json()","set_master_pwfile()","update_all()"],"longSearchIndex":["couch","couch::server","yaltools","yaltools::cmdline","yaltools::crypt","yaltools::jsonformatter","yaltools::labelnotfounderror","yaltools::main","yaltools::mainwrapper","yaltools::procjson","yaltools::serverconnectionerror","yaltools::yaalldocs","yaltools::yadocs","yaltools::yajsonrows","yaltools::yaviewdocs","yaltools::yajsonrows#<<()","yaltools::crypt::decrypt_text()","couch::server#delete()","yaltools::main#delete()","yaltools::yajsonrows#delete_all()","yaltools::yadocs#each()","yaltools::yadocs#each_with_attachments()","yaltools::crypt::encrypt_text()","yaltools::procjson::exclude_value_from_json()","yaltools::crypt::gen_password()","couch::server#get()","yaltools::main#get()","yaltools::cmdline::getcouch()","yaltools::mainwrapper#getcouch()","yaltools::yadocs#get_all()","yaltools::cmdline::get_default_master_pwfile()","yaltools::cmdline::get_default_yaml_conf()","yaltools::cmdline::get_default_yaml_label()","yaltools::cmdline#get_header()","yaltools::procjson::grep_json()","yaltools::procjson::grep_json_p()","couch::server#head()","yaltools::main#head()","yaltools::cmdline::line_to_json()","yaltools::crypt::load_crypt_password()","yaltools::cmdline::load_line()","yaltools::cmdline::load_line_as_csv()","yaltools::yadocs#max_numrows()","couch::server::new()","yaltools::main::new()","yaltools::mainwrapper::new()","yaltools::yadocs::new()","yaltools::yajsonrows::new()","yaltools::yaviewdocs::new()","yaltools::yajsonrows#original_push()","yaltools::yadocs#page()","yaltools::jsonformatter::parse()","couch::server#post()","yaltools::main#post()","yaltools::yajsonrows#post_all()","yaltools::yajsonrows#push()","couch::server#put()","yaltools::main#put()","yaltools::yajsonrows#redeeming_rev()","couch::server#request()","yaltools::crypt::save_crypt_password()","yaltools::cmdline::save_data()","yaltools::procjson::select_value_from_json()","yaltools::mainwrapper#set_master_pwfile()","yaltools::yajsonrows#update_all()"],"info":[["Couch","","Couch.html","","<p>The original code is located at the CouchDB Wiki\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">http</span><span class=\"ruby-value\">:/</span><span class=\"ruby-operator\">/</span><span class=\"ruby-identifier\">wiki</span>.<span class=\"ruby-identifier\">apache</span>.<span class=\"ruby-identifier\">org</span><span class=\"ruby-operator\">/</span><span class=\"ruby-identifier\">couchdb</span><span class=\"ruby-operator\">/</span><span class=\"ruby-constant\">Getting_started_with_Ruby</span>\n</pre>\n"],["Couch::Server","","Couch/Server.html","","<p>Description\n<p>This version of the Couch::Server class is modified for additional\nauthentication methods. …\n"],["YALTools","","YALTools.html","","<p>Description\n<p>YALTools is the top level module which is developed by Yasuhiro ABE.\n<p>Please refer each page …\n"],["YALTools::CmdLine","","YALTools/CmdLine.html","","<p>Description\n<p>YALTools::CmdLine module is a collection of methods which are highly ad-hoc\nand depending …\n"],["YALTools::Crypt","","YALTools/Crypt.html","","<p>Description\n<p>YALTools::Crypt module provides encryption and decryption methods.\n<p>Common Secret Key File  …\n"],["YALTools::JsonFormatter","","YALTools/JsonFormatter.html","","<p>Description\n<p>YALTools::JsonFormatter module provides a human readable fancy format.\n<p>Usage\n"],["YALTools::LabelNotFoundError","","YALTools/LabelNotFoundError.html","","<p>name &mdash; LabelNotFoundError\n<p>when &mdash; The given label name is not found on the yalt.yaml file.\n\n"],["YALTools::Main","","YALTools/Main.html","","<p>Description\n<p>YALTools::Main class is a wrapper class for the Couch::Server class which\nis described at …\n"],["YALTools::MainWrapper","","YALTools/MainWrapper.html","","<p>YALTools::MainWrapper is a class which has a responsibility to control \ninformation about the authentication. …\n"],["YALTools::ProcJson","","YALTools/ProcJson.html","","<p>Description\n<p>YALTools::ProcJson module is a collection of methods related to the JSON\nprocessing.\n<p>In the …\n"],["YALTools::ServerConnectionError","","YALTools/ServerConnectionError.html","","<p>name &mdash; ServerConnectionError\n<p>when &mdash; The “/” does not return the version information.\n\n"],["YALTools::YaAllDocs","","YALTools/YaAllDocs.html","","<p>Description\n<p>YALTools::YaAllDocs is designed to handle huge amount of documents using\nthe BulkDoc (_all_docs) …\n"],["YALTools::YaDocs","","YALTools/YaDocs.html","","<p>YALTools::YaDocs is designed to process huge amount of documents through\nthe CouchDB REST API.\n<p>For the …\n"],["YALTools::YaJsonRows","","YALTools/YaJsonRows.html","","<p>Description\n<p>YALTools::YaJsonRows is a container of json rows.\n<p>Usage\n"],["YALTools::YaViewDocs","","YALTools/YaViewDocs.html","","<p>Description\n<p>YALTools::YaViewDocs is designed to handle huge amount of documents using\nView API.\n<p>Restrictions …\n"],["<<","YALTools::YaJsonRows","YALTools/YaJsonRows.html#method-i-3C-3C","(json)","<p>overrides &lt;&lt; method by new push method.\n"],["decrypt_text","YALTools::Crypt","YALTools/Crypt.html#method-c-decrypt_text","(sec_conf_file, salt, text)","<p>returns the decrypted string.\n<p>If the “YALTSALT” envrionment variable is set, the ENV overwrites …\n"],["delete","Couch::Server","Couch/Server.html#method-i-delete","(uri)",""],["delete","YALTools::Main","YALTools/Main.html#method-i-delete","(uri)","<p>returns the kind of Net::HTTPResponse instance. When an error occures, it\nreturns nil.\n"],["delete_all","YALTools::YaJsonRows","YALTools/YaJsonRows.html#method-i-delete_all","()","<p>adds “_deleted” = true to each item and  executes update query.\n<p>The delete_all finally returns …\n"],["each","YALTools::YaDocs","YALTools/YaDocs.html#method-i-each","(query_options={}, start_page=0, limit=15)","<p>yields [rows, skip, page, max_page, max_rows].\n<p>The <code>query_options</code> must be proper view query options,\n"],["each_with_attachments","YALTools::YaDocs","YALTools/YaDocs.html#method-i-each_with_attachments","(query_options={}, start_page=0, limit=15)","<p>yields [rows, skip, page, max_page, max_rows] with attachment documents. \nIt might be too slow.\n<p>The <code>query_options</code> …\n"],["encrypt_text","YALTools::Crypt","YALTools/Crypt.html#method-c-encrypt_text","(sec_conf_file, plain_text, salt=\"\")","<p>returns [encrypted_text, salt].\n"],["exclude_value_from_json","YALTools::ProcJson","YALTools/ProcJson.html#method-c-exclude_value_from_json","(json, labels)","<p>Please see the following example.\n<p>exclude_value_from_json({“_id”=&gt;“x”, “_rev”=&gt;“y”, …\n"],["gen_password","YALTools::Crypt","YALTools/Crypt.html#method-c-gen_password","()","<p>returns a random string using the Digest::SHA2::hexdigest method. It aims\nto generate a default common …\n"],["get","Couch::Server","Couch/Server.html#method-i-get","(uri)",""],["get","YALTools::Main","YALTools/Main.html#method-i-get","(uri)","<p>returns the result of the JSON.parse(Net::HTTPResponse.body)\n<p>If the return object contains the “error” …\n"],["getCouch","YALTools::CmdLine","YALTools/CmdLine.html#method-c-getCouch","(conf,label,debug=false)","<p>returns the instance of YALTools::Main.\n<p>This method might execute “exit(1)” because of\n<p>missing …\n"],["getCouch","YALTools::MainWrapper","YALTools/MainWrapper.html#method-i-getCouch","()","<p>returns the instance of the YALTools::Main or nil if failed.\n"],["get_all","YALTools::YaDocs","YALTools/YaDocs.html#method-i-get_all","(query_options={}, current_page=1, limit=15)","<p>yields [rows, page, next_page_flag]\n<p><code>rows</code> &mdash; an instance of YALTools::YaJsonRows.\n<p><code>page</code> &mdash; the number of the current …\n"],["get_default_master_pwfile","YALTools::CmdLine","YALTools/CmdLine.html#method-c-get_default_master_pwfile","(conf)","<p>returns the default master_pw filepath.\n"],["get_default_yaml_conf","YALTools::CmdLine","YALTools/CmdLine.html#method-c-get_default_yaml_conf","(basedir)","<p>return the default yaml conf filepath.\n"],["get_default_yaml_label","YALTools::CmdLine","YALTools/CmdLine.html#method-c-get_default_yaml_label","()","<p>returns the default label name, “default.user”\n"],["get_header","YALTools::CmdLine","YALTools/CmdLine.html#method-i-get_header","(couch,uri)","<p>sends HEAD request and returns a Hash object of results.\n"],["grep_json","YALTools::ProcJson","YALTools/ProcJson.html#method-c-grep_json","(json, pattern_list, regexp_flag, ignore_case_flag)","<p>returns true or false.\n<p>It is a wrapper method against the <code>grep_json_p</code> method. This\nmethod handles the …\n"],["grep_json_p","YALTools::ProcJson","YALTools/ProcJson.html#method-c-grep_json_p","(json, pattern, regexp_flag, ignore_case_flag)","<p>returns true or false. If the <code>json</code> contains the\n<code>pattern</code> sequence, then it returns true.\n<p>Examples\n\n<pre>grep_json_p({&quot;k1&quot;=&gt;{&quot;k2&quot;=&gt;{&quot;K3&quot;=&gt;&quot;value&quot;}}}, ...</pre>\n"],["head","Couch::Server","Couch/Server.html#method-i-head","(uri)",""],["head","YALTools::Main","YALTools/Main.html#method-i-head","(uri)",""],["line_to_json","YALTools::CmdLine","YALTools/CmdLine.html#method-c-line_to_json","(line)","<p>parses the line as json. returns the Hash object which converted by\nJSON::parse(line).\n"],["load_crypt_password","YALTools::Crypt","YALTools/Crypt.html#method-c-load_crypt_password","(sec_conf_file)","<p>It is for internal use only.\n"],["load_line","YALTools::CmdLine","YALTools/CmdLine.html#method-c-load_line","(file = '-')","<p>iterates line which is read from $stdin or file.\n<p>The default value, &#39;-&#39;, means that the $stdin …\n"],["load_line_as_csv","YALTools::CmdLine","YALTools/CmdLine.html#method-c-load_line_as_csv","(file, sep)","<p>returnds the Array object which generated by CSV class.\n"],["max_numrows","YALTools::YaDocs","YALTools/YaDocs.html#method-i-max_numrows","(options={})","<p><code>options</code> must be proper view query option values.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">options</span> = {<span class=\"ruby-string\">&quot;group&quot;</span> <span class=\"ruby-operator\">=&gt;</span> <span class=\"ruby-keyword\">true</span>}\n<span class=\"ruby-identifier\">max_numrows</span>(<span class=\"ruby-identifier\">options</span>) <span class=\"ruby-comment\">#=&gt; ...</span>\n</pre>\n"],["new","Couch::Server","Couch/Server.html#method-c-new","(host, port, options = nil)",""],["new","YALTools::Main","YALTools/Main.html#method-c-new","(couch = nil)",""],["new","YALTools::MainWrapper","YALTools/MainWrapper.html#method-c-new","(conf_file, label)","<p>If the label is not defined on the conf_file, it raises the exception,\nYALTools::LabelNotFoundError. …\n"],["new","YALTools::YaDocs","YALTools/YaDocs.html#method-c-new","(couch, dbname)",""],["new","YALTools::YaJsonRows","YALTools/YaJsonRows.html#method-c-new","(couch, dbname)","<p>When creating initial document without “_id”, POST method is required.\n<p>In this case, the “post” …\n"],["new","YALTools::YaViewDocs","YALTools/YaViewDocs.html#method-c-new","(couch, dbname, design_name, view_name)",""],["original_push","YALTools::YaJsonRows","YALTools/YaJsonRows.html#method-i-original_push","(json)","<p>overrides Array::push method\n"],["page","YALTools::YaDocs","YALTools/YaDocs.html#method-i-page","(query_options={}, page_num=0, limit=15)","<p>returns [rows, skip, page, max_page, max_rows].  It is same as the yielded\nvariables at YaDocs::each …\n"],["parse","YALTools::JsonFormatter","YALTools/JsonFormatter.html#method-c-parse","(i, depth=0, indent_unit=\" \")","<p>The <code>depth</code> argument is used for an initial indent size.\n<p>The <code>indent_unit</code> argument is an indent string.\n"],["post","Couch::Server","Couch/Server.html#method-i-post","(uri, json)",""],["post","YALTools::Main","YALTools/Main.html#method-i-post","(uri, json)","<p>returns the kind of Net::HTTPResponse instance. When an error occures, it\nreturns nil.\n"],["post_all","YALTools::YaJsonRows","YALTools/YaJsonRows.html#method-i-post_all","()",""],["push","YALTools::YaJsonRows","YALTools/YaJsonRows.html#method-i-push","(json)","<p>new push method\n"],["put","Couch::Server","Couch/Server.html#method-i-put","(uri, json)",""],["put","YALTools::Main","YALTools/Main.html#method-i-put","(uri, json)","<p>returns the kind of Net::HTTPResponse instance. When an error occures, it\nreturns nil.\n"],["redeeming_rev","YALTools::YaJsonRows","YALTools/YaJsonRows.html#method-i-redeeming_rev","(key = \"_id\")","<p>redeeming the &#39;_rev&#39; entry for each line.\n"],["request","Couch::Server","Couch/Server.html#method-i-request","(req)",""],["save_crypt_password","YALTools::Crypt","YALTools/Crypt.html#method-c-save_crypt_password","(pass, sec_conf_file, perms=0600)","<p>writes the <code>pass</code> into the <code>sec_conf_file</code> by json\nformat.\n"],["save_data","YALTools::CmdLine","YALTools/CmdLine.html#method-c-save_data","(data, file, mode=\"a+\", perms=0755)","<p>writes the <code>data</code> into file or $stdout. It assumes that the\n<code>data</code> is text data, that is the why it uses …\n"],["select_value_from_json","YALTools::ProcJson","YALTools/ProcJson.html#method-c-select_value_from_json","(json, labels)","<p>Please see the following example.\n<p>select_value_from_json({“_id”=&gt;“x”, “_rev”=&gt;“y”, …\n"],["set_master_pwfile","YALTools::MainWrapper","YALTools/MainWrapper.html#method-i-set_master_pwfile","(filepath)","<p>sets the master password filepath for encryption and decription.\n<p>The file format of the master password …\n"],["update_all","YALTools::YaJsonRows","YALTools/YaJsonRows.html#method-i-update_all","()","<p>posts all item to _bulk_docs interface, then it returns failed json rows.\n"]]}}